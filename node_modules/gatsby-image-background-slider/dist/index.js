'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var Img = _interopDefault(require('gatsby-image'));

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var BackgroundSlider = function BackgroundSlider(_ref) {
	var images = _ref.images,
	    duration = _ref.duration,
	    transition = _ref.transition,
	    initDelay = _ref.initDelay,
	    query = _ref.query,
	    children = _ref.children,
	    gatsbyImageProps = objectWithoutProperties(_ref, ['images', 'duration', 'transition', 'initDelay', 'query', 'children']);

	var nodes = [];
	var bgRefs = [];
	var subRefs = [];
	var bgWrappers = [];
	var subWrappers = [];
	var style = gatsbyImageProps.style,
	    imageProps = objectWithoutProperties(gatsbyImageProps, ['style']);


	nodes.safePush = function (data) {
		if (data) {
			return this.push(data);
		} else {
			return this.length;
		}
	};

	if (images) {
		var _loop = function _loop(image) {
			nodes.safePush(query.backgrounds.nodes.find(function (node) {
				return node.relativePath === image;
			}));
		};

		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = images[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var image = _step.value;

				_loop(image);
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}
	} else {
		nodes = query.backgrounds.nodes;
	}

	var imgs = nodes.map(function (data, index) {
		var backgroundStyle = {
			position: "absolute",
			zIndex: -10,
			width: "100%",
			height: "100%",
			margin: 0,
			padding: "none",
			left: 0, top: 0,
			backgroundSize: "cover",
			opacity: index ? 0 : 1,
			transition: 'opacity ' + transition + 's'
		};

		var subStyle = {
			opacity: index ? 0 : 1,
			transition: 'opacity ' + transition + 's',
			pointerEvents: index ? "none" : "auto"
		};

		subRefs[index] = React__default.createRef();
		bgRefs[index] = React__default.createRef();

		return React__default.createElement(
			React__default.Fragment,
			{ key: index },
			React__default.createElement(
				'div',
				{ ref: bgRefs[index] },
				React__default.createElement(Img, _extends({ fluid: data.childImageSharp.fluid, style: _extends({}, backgroundStyle, style) }, imageProps))
			),
			React__default.createElement(
				'div',
				{ ref: subRefs[index], style: subStyle },
				React__default.Children.toArray(children)[index]
			)
		);
	});

	var initEffect = function initEffect() {
		bgRefs.forEach(function (bgRef) {
			bgWrappers.push(bgRef.current.firstElementChild);
		});

		subRefs.forEach(function (subRef) {
			subWrappers.push(subRef.current);
		});

		var callback = function callback() {
			var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

			var length = bgWrappers.length;

			bgWrappers[index].style.opacity = 0;
			bgWrappers[(index + 1) % length].style.opacity = 1;

			subWrappers[index].style.opacity = 0;
			subWrappers[index].style.pointerEvents = "none";

			subWrappers[(index + 1) % length].style.opacity = 1;
			subWrappers[(index + 1) % length].style.pointerEvents = "auto";

			setTimeout(callback, duration * 1000, (index + 1) % length);
		};

		setTimeout(callback, initDelay * 1000, 0);
	};

	// Runs once after DOM is loaded; effectively `componentDidMount`	
	React.useEffect(initEffect, []);

	return React__default.createElement(
		React__default.Fragment,
		null,
		imgs
	);
};

BackgroundSlider.defaultProps = {
	images: null,
	duration: 5,
	transition: 2,
	initDelay: 5
};

BackgroundSlider.propTypes = {
	query: PropTypes.object.isRequired,
	images: PropTypes.arrayOf(PropTypes.string),
	duration: PropTypes.number,
	transition: PropTypes.number,
	initDelay: PropTypes.number
};

module.exports = BackgroundSlider;
//# sourceMappingURL=index.js.map
